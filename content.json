{"meta":{"title":"luffyjet の手帳","subtitle":null,"description":"爱ACGN的绅士","author":"luffyjet","url":"http://luffyjet.oschina.io"},"pages":[{"title":"about","date":"2015-04-07T03:15:44.000Z","updated":"2015-04-07T03:18:32.000Z","comments":true,"path":"about/index.html","permalink":"http://luffyjet.oschina.io/about/index.html","excerpt":"","text":"暂无"},{"title":"categories","date":"2015-04-07T03:17:01.000Z","updated":"2015-04-07T03:21:23.000Z","comments":true,"path":"categories/index.html","permalink":"http://luffyjet.oschina.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2015-04-07T03:20:28.000Z","updated":"2015-04-07T03:20:52.000Z","comments":true,"path":"tags/index.html","permalink":"http://luffyjet.oschina.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Android调试自测工具01 (Hugo、Timber、Scalpel)","slug":"android-debug-tools-hugo-scalpel-timber","date":"2015-04-10T02:43:23.000Z","updated":"2016-11-09T06:54:05.000Z","comments":true,"path":"2015/04/10/android-debug-tools-hugo-scalpel-timber/","link":"","permalink":"http://luffyjet.oschina.io/2015/04/10/android-debug-tools-hugo-scalpel-timber/","excerpt":"三个工具都出自JakeWharton大神。hugo和timber用于打印Log, scalpel用于在3D下查看界面的图层。 Hugo做项目的时候有时候需要打印方法的传参和返回值，甚至方法的执行时间，有没有一种简单方便通用的方式去做这个呢，Hugo就可以。使用方法很简单，Hugo是基于注解被调用的，引入相关依赖后，在方法上加上 @DebugLog 即可。也可以加在内部类上。 我没研究在Eclipse下怎么引入这个东西，用Eclipse的同志趁早转投AndroidStudio吧。AndroidStudio下引入Hugo很方便，添加两行代码即可。 先看看打印的效果图：","text":"三个工具都出自JakeWharton大神。hugo和timber用于打印Log, scalpel用于在3D下查看界面的图层。 Hugo做项目的时候有时候需要打印方法的传参和返回值，甚至方法的执行时间，有没有一种简单方便通用的方式去做这个呢，Hugo就可以。使用方法很简单，Hugo是基于注解被调用的，引入相关依赖后，在方法上加上 @DebugLog 即可。也可以加在内部类上。 我没研究在Eclipse下怎么引入这个东西，用Eclipse的同志趁早转投AndroidStudio吧。AndroidStudio下引入Hugo很方便，添加两行代码即可。 先看看打印的效果图： 配置的流程： Project级别的build.gradle dependencies 内加入 dependencies { classpath &apos;com.android.tools.build:gradle:1.1.0&apos; classpath &apos;com.jakewharton.hugo:hugo-plugin:1.2.1&apos; } Module级别的build.gradle 顶部加入 apply plugin: &apos;com.jakewharton.hugo&apos; 然后代码中加入注解即可 12345678910111213141516171819202122232425@DebugLogprivate int fibonacci(int number) &#123; if (number &lt;= 0) &#123; throw new IllegalArgumentException(\"Number must be greater than zero.\"); &#125; if (number == 1 || number == 2) &#123; return 1; &#125; // NOTE: Don't ever do this. Use the iterative approach! return fibonacci(number - 1) + fibonacci(number - 2);&#125; @DebugLogclass Charmer &#123; private final String name; Charmer(String name) &#123; this.name = name; &#125; public String askHowAreYou() &#123; return \"How are you \" + name + \"?\"; &#125;&#125; TimberTimber其实就是对Android的Log类进行封装后的一个Log工具，平时我自己也有封装过，不过大神的封装非常优雅。Timber只有一个类文件，可以单独把它复制出来放项目里，也可以通过Gradle引用：​ compile ‘com.jakewharton.timber:timber:2.7.1’ Timber使用的时候推荐在Application类中初始化，比如： 123456789101112public class DemoApplication extends Application &#123; @Override public void onCreate() &#123; super.onCreate(); if (BuildConfig.DEBUG) &#123; Timber.plant(new Timber.DebugTree()); &#125; else &#123; Timber.plant(new CrashReportingTree()); &#125; &#125; &#125;&#125; Timber.plant（Tree tree）用来给Timber设置用于打印的实现类，Tree是个接口，DebugTree是Timber中已经实现了tree的类，可直接拿来用。Timber中还有个HollowTree的类用于扩展，比如上面的CrashReportingTree，我们可以把崩溃打印进行一些处理。使用的时候调用静态方法即可： 1234Timber.tag(\"LifeCycles\");//设置只能用一次的TagTimber.d(\"Activity Created\"); //DebugTree 会帮你进行格式化输出Timber.i(\"A button with ID %s was clicked to say '%s'.\", id, messag); 其他的查看源码吧。 Scalpel这个可以查看界面的图层，3D的效果，不像开发者选项中 开启显示布局边界 是平面的线框。用AndroidStudio 引用只要在 build.gradle添加 1compile &apos;com.jakewharton.scalpel:scalpel:1.1.2&apos; 使用的时候你的layout根节点必须是 ScalpelFrameLayout , ScalpelFrameLayout有以下几个常用方法： 开启3D效果 ： setLayerInteractionEnabled(boolean). 显隐DrawViews：setDrawViews(boolean). 显隐 view ID： setDrawIds(boolean). 修改边框的颜色和阴影 setChromeColor(int) and setChromeShadowColor(int). 手势操作的方法： 单指用来旋转整个模型 双指垂直收缩来调整模型大小 双指水平收缩来调整每个图层间的间距 效果图：","categories":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}],"tags":[{"name":"debug","slug":"debug","permalink":"http://luffyjet.oschina.io/tags/debug/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}]},{"title":"Facebook Stetho 使用学习","slug":"facebook-stetho-okhttp-study","date":"2015-04-08T07:39:46.000Z","updated":"2016-03-25T06:04:42.000Z","comments":true,"path":"2015/04/08/facebook-stetho-okhttp-study/","link":"","permalink":"http://luffyjet.oschina.io/2015/04/08/facebook-stetho-okhttp-study/","excerpt":"今年年初，facebook开源了一个Android开发调试工具，叫stetho，应该是单词stethoscope的一部分吧，意为诊断器。 代码托管地址： https://github.com/facebook/stetho 在项目中添加相应代码，通过Chrome DevTools连接设备后具备以下功能： 可以在Chrome里进行网络访问检测，可以查看请求链接，请求头，JSON数据等 不root的情况下查看Sqlite数据库，并且可以使用sql语句去操作 最近又升级了，API 15 以上能查看View hierarchy了 dumpapp 工具提供强大的命令行接口来访问应用内部 更新比较频繁，前几天更新到1.1.0了，使用AndroidStudio可以很方便的添加到项目中。当然也可以从github页面下载最新Jar包。","text":"今年年初，facebook开源了一个Android开发调试工具，叫stetho，应该是单词stethoscope的一部分吧，意为诊断器。 代码托管地址： https://github.com/facebook/stetho 在项目中添加相应代码，通过Chrome DevTools连接设备后具备以下功能： 可以在Chrome里进行网络访问检测，可以查看请求链接，请求头，JSON数据等 不root的情况下查看Sqlite数据库，并且可以使用sql语句去操作 最近又升级了，API 15 以上能查看View hierarchy了 dumpapp 工具提供强大的命令行接口来访问应用内部 更新比较频繁，前几天更新到1.1.0了，使用AndroidStudio可以很方便的添加到项目中。当然也可以从github页面下载最新Jar包。 Chrome DevTools 需要科学上网(fanqiang),否则点 inspect 会出一直是一块白板。（或者寻求其他方法解决）要在项目中启动Stetho很方便，按照官方的说明： 添加初始化的代码到Application内，完成这一步就具备查看数据库，查看View层级结构，使用默认dumpapp工具的能力了 public class MyApplication extends Application { public void onCreate() { super.onCreate(); Stetho.initialize(Stetho.newInitializerBuilder(this) .enableDumpapp(Stetho.defaultDumperPluginsProvider(this)) .enableWebKitInspector(Stetho.defaultInspectorModulesProvider(this)).build(); } } 开启网络检测，有两种方式 使用HttpURLConnection有些麻烦，可以参考我提供的DEMO的代码（在正文最底下），需要用到另一个依赖 stetho-urlconnection 如果用的目前超流行的 OkHttp 则非常方便，给OkHttpClient 设置一个StethoInterceptor 即可,需要另一个依赖 stetho-okhttp OkHttpClient client = new OkHttpClient(); client.networkInterceptors().add(new StethoInterceptor()); 如果用了Retrofit这个开源项目，也可以很方便的进行设置，同样需要另一个依赖 stetho-okhttp OkHttpClient client = new OkHttpClient(); client.networkInterceptors().add(new StethoInterceptor()); RestAdapter adapter = new RestAdapter.Builder().setClient(new OkClient(client)).setEndpoint(BASE_URL).buid(); 自定义 dumpapp 可以参考我提供的DEMO的代码，值得注意的是 该工具只能运行在 类Unix环境下，比如Linux和Mac。 效果截图（点击可查看大图） 网络请求监测 查看与操作sqlite操作效果 查看与操作sharedpreference 在Chrome上查看View的层级 在上图显示的层级中我选中Actionbar后，手机上也会显示被选中的位置 http请求头查看 json数据查看 最后附上我的 DEMO APK Source Code","categories":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}],"tags":[{"name":"debug","slug":"debug","permalink":"http://luffyjet.oschina.io/tags/debug/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}]},{"title":"开源许可协议学习","slug":"open-source-licenses-study","date":"2015-04-08T04:03:41.000Z","updated":"2016-03-25T05:39:36.000Z","comments":true,"path":"2015/04/08/open-source-licenses-study/","link":"","permalink":"http://luffyjet.oschina.io/2015/04/08/open-source-licenses-study/","excerpt":"一直在用开源代码，但是对于那些 开源许可协议 了解太少，惭愧。 关于几个主流协议间的区别，一图顶千言： GitHub上开源项目协议使用情况： 由图可以看出 MIT 限制是最宽松的，其可谓为所欲为，因此使用量也是最大的。当然图中的协议不全，还有比GPL更严格的协议AGPL。每个协议的具体内容，我看不懂，能区别他们就好。要商用的软件就不能采用带GPL系列许可证的，不过在中国这方面就… 以下是具体的介绍，文字均来源于网络。 什么是软件许可协议？","text":"一直在用开源代码，但是对于那些 开源许可协议 了解太少，惭愧。 关于几个主流协议间的区别，一图顶千言： GitHub上开源项目协议使用情况： 由图可以看出 MIT 限制是最宽松的，其可谓为所欲为，因此使用量也是最大的。当然图中的协议不全，还有比GPL更严格的协议AGPL。每个协议的具体内容，我看不懂，能区别他们就好。要商用的软件就不能采用带GPL系列许可证的，不过在中国这方面就… 以下是具体的介绍，文字均来源于网络。 什么是软件许可协议？ 关于究竟什么是许可协议的问题上有很多事实而非的说法。当你给软件附上许可证时，意味着你将保留对软件的所有权利。你将对你的作品拥有原创版权(或者是专利权，如果你申请到了)。许可协议用来授权其他人具有某种使用你的作品的权利。 &#160; &#160; &#160; &#160; 依靠许可协议将你的作品对外开源或者对你的作品的各个方面逐一进行授权，是一个不错的方法。一旦对外开源，你将失去所有对你的作品的版权，别人也没有义务将你标注为作品的原创者或捐献者。而我说的后一种情况里，估计你需要从设计和开发的工作中抽出更多的时间来处理遇到的各种侵权问题。 &#160; &#160; &#160; &#160; 开源许可协议 使人们免去了研究那些专业的许可条款的麻烦，使人们更方便的对开源项目贡献出自己的代码。而且它还能保护你作为作品的原创作者，确保你至少拥有由于贡献参与而带来的署名荣誉。它还能用来阻止其他人企图声明对你的作品拥有所有权的行为。 常见开源许可协议：GPL、LGPL、BSD、Apache License 2.0、MIT等GPL&#160; &#160; &#160; &#160; 全称 GNU General Public License。它的主要内容为：只要在一个软件中使用(“使用”指类库引用或者修改后的代码) GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这个协议就不太适合商用软件，或者准备使用GPL开源组件的商用项目。基于这个协议的项目，极大的提高了开源软件的数量。上面那个微博的案例，如果作者使用了GPL协议，而使用方没有公开源代码就是违反了协议。目前用的多的是GPLV1，GPLV2。这两个什么区别看后面那张树形图。采用这个协议的开源软件有：Linux、 MySQL. LGPL&#160; &#160; &#160; &#160; 最初是Library GPL的缩写，后来改称作Lesser GPL。由于GPL太严格，限制了很多商用软件使用GPL组件才推出了这个LGPL。LGPL允许商业软件通过引用类库的方式使用LGPL组件（不直接使用源代码），这样可以不需要开源商业软件的代码。但是如果要修改原始组件的代码，则涉及修改部分的代码和基于原来代码衍生的代码都必须采用LGPL协议。LGPL不适合以LGPL协议为基础的代码进行二次开发的商业软件，但是商用软件可以采用编译后的类库引用就不需要公开源代码了。采用这个协议的开源软件有： JBoss、 FCKeditor 、 Hibernate。之前extjs就因为从LGPL转换到GPL带来了不少的震动。详情点击。 BSD&#160; &#160; &#160; &#160; 全称 Berkeley Software Distribution。这个协议相对上面两个协议宽松很多，允许使用者修改和重新发布代码，也允许使用或在BSD代码基础上开发商业软件发布和销售，因此是适用于商业软件的。使用者别太高兴，使用时还必须做到满足三个条件： 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。使用用BSD协议的开源软件有： nginx、CruiseControl、Redis… Apache License 2.0&#160; &#160; &#160; &#160; 这个协议除了为用户提供版权许可之外，还有专利许可。与BSD协议权限类似， 允许代码修改，再发布，适用商业软件。但是也需要满足以下条件： 需要给代码的用户一份Apache Licence。 如果你修改了代码，需要再被修改的文件中说明。 在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。 如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。 除了这些条件它还有这些好处： 永久权利 一旦被授权，永久拥有。 全球范围的权利 在一个国家获得授权，适用于所有国家。假如你在美国，许可是从印度授权的，也没有问题。 授权免费 无版税， 前期、后期均无任何费用。 授权无排他性 任何人都可以获得授权 授权不可撤消 一旦获得授权，没有任何人可以取消。比如，你基于该产品代码开发了衍生产品，你不用担心会在某一天被禁止使用该代码 使用Apache License 2.0协议的开源软件有：Hadoop、SpringFramework、MongoDB… MIT&#160; &#160; &#160; &#160; 源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称X11协议。MIT与BSD类似，但是比BSD协议更加宽松，是目前最少限制的协议。这个协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息。适用商业软件。使用MIT的软件项目有：jquery、Node.js。 扩展阅读流行的开源许可协议经过Open Source Initiative 组织批准的开源协议](http://opensource.org/licenses/alphabetical)[开源软件及国内发展现状做一个优秀的开源项目，需要注意哪些方面？","categories":[{"name":"OpenSource","slug":"OpenSource","permalink":"http://luffyjet.oschina.io/categories/OpenSource/"}],"tags":[{"name":"OpenSourceLicenses","slug":"OpenSourceLicenses","permalink":"http://luffyjet.oschina.io/tags/OpenSourceLicenses/"}],"keywords":[{"name":"OpenSource","slug":"OpenSource","permalink":"http://luffyjet.oschina.io/categories/OpenSource/"}]},{"title":"Retrofit的科学使用：Singleton ","slug":"retrofit-singleton-usage","date":"2014-12-30T02:43:23.000Z","updated":"2016-11-07T11:42:32.000Z","comments":true,"path":"2014/12/30/retrofit-singleton-usage/","link":"","permalink":"http://luffyjet.oschina.io/2014/12/30/retrofit-singleton-usage/","excerpt":"单例模式很适合Android开发，对于Retrofit(Android开发中一个非常优秀的Rest Client)，也要使用单例模式获取实例。 下面是Jake大神在stackoverflow上关于Retrofit的使用问题的回答。 Both the RestAdapter and the generated instance of your services (MyTaskService in this case) are extremely expensive objects and should be used as singletons. This means that you should only ever call restAdapter.create once and re-use the same instance of MyTaskService every time you need to interact with. I cannot stress this enough. You can use the regular singleton pattern in order to ensure that there only is ever a single instance of these objects that you use everywhere. A dependency injection framework would also be something that could be used to manage these instances but would be a bit overkill if you are not already utilizing it. 从中我们可以看到 Jake表示 Retrofit每次创建RestAdapter和自定义的接口对象是很耗费资源的，因此不需要每次去创建，要使用单例模式。确实Retrofit是通过添加运行时注解，采用动态代理的方式去创建实例的。","text":"单例模式很适合Android开发，对于Retrofit(Android开发中一个非常优秀的Rest Client)，也要使用单例模式获取实例。 下面是Jake大神在stackoverflow上关于Retrofit的使用问题的回答。 Both the RestAdapter and the generated instance of your services (MyTaskService in this case) are extremely expensive objects and should be used as singletons. This means that you should only ever call restAdapter.create once and re-use the same instance of MyTaskService every time you need to interact with. I cannot stress this enough. You can use the regular singleton pattern in order to ensure that there only is ever a single instance of these objects that you use everywhere. A dependency injection framework would also be something that could be used to manage these instances but would be a bit overkill if you are not already utilizing it. 从中我们可以看到 Jake表示 Retrofit每次创建RestAdapter和自定义的接口对象是很耗费资源的，因此不需要每次去创建，要使用单例模式。确实Retrofit是通过添加运行时注解，采用动态代理的方式去创建实例的。线程安全的饿汉式： 1234567891011121314151617181920private static GitHubApi sGitHubApi = new GitHubApi(); private GitHub sGitHub;private GitHubApi() &#123; initService();&#125;public GitHub getGitHub() &#123; return sGitHub;&#125;public static GitHubApi getInstance() &#123; return sGitHubApi;&#125;private void initService() &#123; RestAdapter sRestAdapter = new RestAdapter.Builder().setClient(getOkClient()).setEndpoint(BASE_URL).build(); sGitHub = sRestAdapter.create(GitHub.class);&#125; or 懒汉式： 123456789private static GitHub sGitHub;public static GitHub getGitHub() &#123; if (null == sGitHub) &#123; RestAdapter sRestAdapter = new RestAdapter.Builder().setClient(getOkClient()).setEndpoint(BASE_URL).build(); sGitHub = sRestAdapter.create(GitHub.class); &#125; return sGitHub;&#125;","categories":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}],"tags":[{"name":"Retrofit","slug":"Retrofit","permalink":"http://luffyjet.oschina.io/tags/Retrofit/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://luffyjet.oschina.io/categories/android/"}]},{"title":"基于Hexo框架的静态博客搭建","slug":"to_build_hexo_blog","date":"2014-12-21T14:20:20.000Z","updated":"2016-02-22T07:48:18.000Z","comments":true,"path":"2014/12/21/to_build_hexo_blog/","link":"","permalink":"http://luffyjet.oschina.io/2014/12/21/to_build_hexo_blog/","excerpt":"BBS,WordPress都折腾过，弄来弄去最后发现GitHub上可以搭建自定义域名的静态页面博客，所以摸索了一下如何在github上搭建自己的博客。开始按着GitHub pages的介绍和文档，搭建了基于Jekyll的博客，但是折腾了很久都没发现自己喜欢的博客模板。后来搜索，发现了Hexo框架，顿时觉得这正是我所需要的。到后面发现了国内的GitCafe,把博客部署到GitCafe上，访问速度快了很多。 Hexo框架的安装也没有Jekyll繁琐，对Windows的支持比Jekyll好很多。Jekyll在windows下各种问题。 Hexo的安装","text":"BBS,WordPress都折腾过，弄来弄去最后发现GitHub上可以搭建自定义域名的静态页面博客，所以摸索了一下如何在github上搭建自己的博客。开始按着GitHub pages的介绍和文档，搭建了基于Jekyll的博客，但是折腾了很久都没发现自己喜欢的博客模板。后来搜索，发现了Hexo框架，顿时觉得这正是我所需要的。到后面发现了国内的GitCafe,把博客部署到GitCafe上，访问速度快了很多。 Hexo框架的安装也没有Jekyll繁琐，对Windows的支持比Jekyll好很多。Jekyll在windows下各种问题。 Hexo的安装 保证你系统安装好了NodeJS 和 Git客户端后，安装部署Hexo到本机只需要按照Hexo官网的说明输入几行命令即可。 Windows下安装NodeJS就是动动鼠标的事，Linux下相对麻烦些。我尝试了将Hexo安装在Ubantu上。记录下我的安装过程。 Ubantu下安装NodeJS 不要sudo apt-get xxx 的方式安装NodeJS，这样只会安装过时的版本，到时候无法安装Hexo，以防万一先执行下卸载命令: $sudo apt-get autoremove npm $sudo apt-get autoremove nodejs 首先去官网下载Linux对应的NodeJS源码包 Ubantu下直接双击打开拖出来就是。 确保NodeJS能正常编译还要检查Python、gcc、g++ $ sudo apt-get install python $ sudo apt-get install build-essential $ sudo apt-get install gcc $ sudo apt-get install g++ 然后cd 进入到你解压的目录 执行 ./configuremakesudo make install Make的过程有点久，请耐心等待。以上步骤完毕之后，进行软链接: $ sudo ln -s /usr/local/bin/node /usr/bin/node $ sudo ln -s /usr/local/bin/npm /usr/bin/npm 然后再查看NodeJS版本,没有执行上面命令时会出现无法找到node的错误 $ node -v $ npm -v 到此NodeJS安装完毕。 Ubantu下安装Git安装Hexo下载主题、插件和部署到github，都用的Git 。 所以你还得安装Git，Windows下载安装文件安装即可记得安装的时候勾选添加到环境变量。Ubantu下执行 sudo apt-get install git 完成Git安装后按照一开始说的命令进行Hexo安装。安装好之后就是查看Hexo的文档和插件,还有主题页面，去完善自己的静态博客了。 选择一套自己喜欢的主题，按照说明进行切换，然后添加评论，搜索等等插件。然后执行 hexo server 用浏览器打开 localhost:4000 ，查看运行效果。 那么要怎么部署到服务端上呢，接着看下面。 怎么在Github上创建自己的博客，参考 https://pages.github.com/ https://help.github.com/categories/github-pages-basics/ 怎么在GitCafe上创建自己的博客，参考 GitCafe的帮助页面 https://gitcafe.com/GitCafe/Help GitCafe是国内的类Github网站，也支持搭建博客，访问速度会比Github快。上面的帮助页面包含SSH Key配置(当然你也可以选择Https方式提交),如何部署博客到GitCafe Pages服务，如何绑定自定义域名等。 新版的Hexo部署博客的方式有所改变 统一了Git方式的部署，需要安装插件具体查看官方文档： http://hexo.io/docs/deployment.html 绑定自定义域名到Github Pages在自己的域名解析设置页面内添加一条A记录到以下IP的其中一个即可 192.30.252.153 192.30.252.154 然后在相应的Github项目内创建一个CNAME文件，中间只记录你的域名 比如 www.luffyjet.com DNS设置具体过程请参考 http://jingyan.baidu.com/article/dca1fa6fa1e403f1a5405262.html 用Markdown写文章Hexo博客的文章都是用Markdown写作的，具体语法参考 标准版: http://daringfireball.net/projects/markdown/syntax Github版: https://help.github.com/articles/github-flavored-markdown/ 更多的Hexo使用和修改请仔细阅读官方文档。更多的个性化设置介绍请参考下面的文章： http://zipperary.com/categories/hexo/","categories":[{"name":"other","slug":"other","permalink":"http://luffyjet.oschina.io/categories/other/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://luffyjet.oschina.io/tags/hexo/"}],"keywords":[{"name":"other","slug":"other","permalink":"http://luffyjet.oschina.io/categories/other/"}]}]}